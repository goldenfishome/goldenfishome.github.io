---
title: "ARIMAX/SARIMAX/VAR"
---

```{r,echo=FALSE, message=FALSE, warning=FALSE}
library(flipbookr)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
require(gridExtra)
library(quantmod)
library(vars)
```

## ARIMAX

ARIMAX model assumes that future values of a variable linearly depend on its past values, as well as on the values of past (stochastic) shocks. It is an extended version of the ARIMA model, with other independent (predictor) variables. The model is also referred to as the dynamic regression model. The X added to the end stands for "exogenous". In other words, it suggests adding a separate different outside variable to help measure our endogenous variable.

The 'exogenous' variables added here are COVID-19 case numbers and COVID-19 vaccine rates. The number of COVID-19 cases in US can affect healthcare stock prices, e.g. UNH. Higher case numbers may result in increased demand for healthcare services, such as hospitalizations, treatments, and testing, which could positively impact the stock prices of healthcare companies involved in providing those services. Conversely, lower case numbers may lead to reduced demand for healthcare services, potentially resulting in lower stock prices for healthcare companies.

Vaccine rates, specifically the rate at which a population is vaccinated against COVID-19, can also impact healthcare stock prices. Higher vaccine rates are generally seen as positive for healthcare companies, as vaccines are considered a key tool in controlling the spread of the virus and reducing the severity of illness. Higher vaccine rates may lead to decreased demand for COVID-19 treatments and testing, but increased demand for vaccines and other preventive healthcare measures, which could positively impact the stock prices of healthcare companies involved in vaccine production or distribution, as well as other preventive healthcare services.

In this section, we choose the UNH stock price to fit ARIMAX model with COVID-19 case numbers and COVID-19 vaccine rates.

### Step 1: Data Prepare

```{r, results='hide'}
getSymbols("UNH", from="2020-12-16", src="yahoo")
```


```{r}
UNH_df <- as.data.frame(UNH)
UNH_df$Date <- rownames(UNH_df)
UNH_df <- UNH_df[c('Date','UNH.Adjusted')]
UNH_df <- UNH_df %>%
  mutate(Date = as.Date(Date)) %>%
  complete(Date = seq.Date(min(Date), max(Date), by="day"))

# fill missing values in stock 
UNH_df <- UNH_df %>% fill(UNH.Adjusted)

new_dates <- seq(as.Date('2020-12-16'), as.Date('2023-3-21'),'week')

UNH_df <- UNH_df[which((UNH_df$Date) %in% new_dates),]

vaccine_df <- read.csv('data/vaccine_clean.csv')

new_dates <- seq(as.Date('2020-12-16'), as.Date('2023-3-22'),'week')

#vaccine_df
vaccine_df$Date <- as.Date(vaccine_df$Date)
vaccine_df <- vaccine_df[which((vaccine_df$Date) %in% new_dates),]

#covid_df
covid_df <- read.csv('data/covid.csv')

#covid_ts <- ts(covid_df$Weekly.Cases, start = c(2020,1,29), frequency = 54)
covid_df$Date <- as.Date(covid_df$Date)
covid_df <- covid_df[covid_df$Date >= '2020-12-16'&covid_df$Date < '2023-03-22',]

# combine all data, create dataframe
df <- data.frame(UNH_df, vaccine_df$total_doses, covid_df$Weekly.Cases)
colnames(df) <- c('Date', 'stock_price', 'vaccine_dose','covid_case')

knitr::kable(head(df))
```

### Step 2: Plotting the Data

```{r}
df.ts<-ts(df,star=decimal_date(as.Date("2020-12-16",format = "%Y-%m-%d")),frequency = 52)

autoplot(df.ts[,c(2:4)], facets=TRUE) +
  xlab("Date") + ylab("") +
  ggtitle("Variables influencing UNH Stock Price in USA")
```

UNH stock price, Covid, Vaccine values

### Step 3: Fitting the model using 'auto.arima()\`

Here I'm using auto.arima() function to fit the ARIMAX model. Here we are trying to predict UNH stock price using COVID vaccine dose and COVID cases. All variables are time series and the exogenous variables in this case are vaccine_dose and covid_case.

```{r}
xreg <- cbind(Vac = df.ts[, "vaccine_dose"],
              Imp = df.ts[, "covid_case"])

fit <- auto.arima(df.ts[, "stock_price"], xreg = xreg)
summary(fit)
```

```{r}
checkresiduals(fit)
```

This is an ARIMA model. This is a Regression model with ARIMA(0,1,0) errors.

### Step 4: Fitting the model manually

Here we will first have to fit the linear regression model predicting stock price using Covid cases and vaccine doses.

Then for the residuals, we will fit an ARIMA/SARIMA model.

```{r}
df$stock_price <- ts(df$stock_price,star=decimal_date(as.Date("2020-12-16",format = "%Y-%m-%d")),frequency = 52)
df$vaccine_dose <-ts(df$vaccine_dose,star=decimal_date(as.Date("2020-12-16",format = "%Y-%m-%d")),frequency = 52)
df$covid_case<-ts(df$covid_case,star=decimal_date(as.Date("2020-12-16",format = "%Y-%m-%d")),frequency = 52)

######### First fit the linear model#######
fit.reg <- lm(stock_price ~ vaccine_dose+covid_case, data=df)
summary(fit.reg)
```

```{r}
res.fit<-ts(residuals(fit.reg),star=decimal_date(as.Date("2020-12-16",format = "%Y-%m-%d")),frequency = 52)

########## Then look at the residuals ########
acf(res.fit)

```

```{r}
Pacf(res.fit)
```

```{r}
res.fit %>% diff() %>% ggtsdisplay()
```

```{r}
res.fit %>% diff() %>% diff(52) %>% ggtsdisplay()
```

Finding the model parameters.

```{r}
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*23),nrow=23) # roughly nrow = 3x4x2


for (p in 1:3)# p=1,2,
{
  for(q in 1:3)# q=1,2,
  {
    for(d in 0:1)# 
    {
      
      if(p-1+d+q-1<=8)
      {
        
        model<- Arima(res.fit,order=c(p-1,d,q-1),include.drift=TRUE) 
        ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
        i=i+1
        #print(i)
        
      }
      
    }
  }
}

temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")

#temp
knitr::kable(temp)
```

```{r}
print('Minimum AIC')
temp[which.min(temp$AIC),] 
```

```{r}
print('Minimum BIC')
temp[which.min(temp$BIC),] 
```

```{r}
print('Minimum AICc')
temp[which.min(temp$AICc),] 
```

```{r}
set.seed(1234)

model_output12 <- capture.output(sarima(res.fit, 0,1,0)) 
```

```{r}
cat(model_output12[9:38], model_output12[length(model_output12)], sep = "\n")
```

```{r}
set.seed(1234)

model_output13 <- capture.output(sarima(res.fit, 1,1,0)) 
```

```{r}
cat(model_output13[16:46], model_output13[length(model_output13)], sep = "\n")
```

ARIMA(0,1,0) and ARIMA(1,1,0) both look okay.

### Step 5: Using Cross Validation

```{r}
k <- 36 # minimum data length for fitting a model 
n <- length(res.fit)
n-k # rest of the observations
```

```{r}
i=1
err1 = c()
err2 = c()

rmse1 <- c()
rmse2 <- c()

for(i in 1:(n-k))
{
  xtrain <- res.fit[1:(k-1)+i] #observations from 1 to 75
  xtest <- res.fit[k+i] #76th observation as the test set
  
  fit <- Arima(xtrain, order=c(1,1,0),include.drift=FALSE, method="ML")
  fcast1 <- forecast(fit, h=1)
  
  fit2 <- Arima(xtrain, order=c(0,1,0),include.drift=FALSE, method="ML")
  fcast2 <- forecast(fit2, h=1)
  
  #capture error for each iteration
  # This is mean absolute error
  err1 = c(err1, abs(fcast1$mean-xtest)) 
  err2 = c(err2, abs(fcast2$mean-xtest))
  
  # This is mean squared error
  err3 = c(err1, (fcast1$mean-xtest)^2)
  err4 = c(err2, (fcast2$mean-xtest)^2)
  
  rmse1 <- c(rmse1, sqrt((fcast1$mean-xtest)^2))
  rmse2 <- c(rmse2, sqrt((fcast2$mean-xtest)^2))
  
}

(MAE1=mean(err1)) # This is mean absolute error
```

```{r}
(MAE2=mean(err2)) #has slightly higher error
```

```{r}
MSE1=mean(err1) #fit 1,1,0
MSE2=mean(err2)#fit 0,1,0

MSE1
```

```{r}
MSE2
```

```{r}
rmse_df <- data.frame(rmse1,rmse2)
rmse_df$x <- as.numeric(rownames(rmse_df))

plot(rmse_df$x, rmse_df$rmse1, type = 'l', col=2, xlab="horizon", ylab="RMSE")
lines(rmse_df$x, rmse_df$rmse2, type="l",col=3)
legend("topleft",legend=c("fit1","fit2"),col=2:4,lty=1)

```

### Step 6: forcasting

```{r}
vac_fit<-auto.arima(df$vaccine_dose) #fiting an ARIMA model to the vaccine_dose variable
summary(vac_fit)
```

```{r}
fvac<-forecast(vac_fit)

covid_fit<-auto.arima(df$covid_case) #fiting an ARIMA model to the covid_case variable
summary(covid_fit)
```

```{r}
fcov<-forecast(covid_fit)

fxreg <- cbind(Vac = fvac$mean,
              Cov = fcov$mean)

fcast <- forecast(fit, xreg=fxreg) #fimp$mean gives the forecasted values
autoplot(fcast) + xlab("Date") +
  ylab("Price")
```

### Discussion

Based on the result above, the number of daily COVID-19 vaccination number is not significant on predicting the UNH stock price, while the number of COVID-19 cases is. Though the number of COVID-19 vaccination number is not significant here, it does not mean that it does not affect healthcare stock price. While UNH is a healthcare company that is involved in health insurance, healthcare services, and technology solutions, it is not directly involved in COVID-19 vaccine development or production. Therefore, the number of COVID-19 vaccine doses administered may not have a direct impact on UNH's operations or revenue.  


## VAR

VAR models (vector autoregressive models) are used for multivariate time series. The structure is that each variable is a linear function of past lags of itself and past lags of the other variables. A Vector autoregressive (VAR) model is useful when one is interested in predicting multiple time series variables using a single model.

The variables we are interested here are GDP and Unemployment rate in US. The overall health of the economy, as reflected by the GDP, can influence healthcare stock prices. A strong GDP generally indicates a healthy economy with higher levels of consumer spending, business investment, and economic growth. In such an environment, healthcare companies may experience increased demand for their products and services, which could positively impact their stock prices. Conversely, a weak GDP may signal an economic slowdown or recession, which could result in reduced demand for healthcare products and services, potentially leading to lower stock prices for healthcare companies. The unemployment rate, which reflects the percentage of the labor force that is unemployed, can also affect healthcare stock prices. A low unemployment rate is generally indicative of a strong labor market, with more people employed and potentially having access to employer-sponsored healthcare benefits. This may result in increased demand for healthcare services, positively impacting healthcare stock prices. On the other hand, a high unemployment rate may indicate a weak labor market, with more people losing their jobs and potentially losing access to healthcare benefits, leading to reduced demand for healthcare services and potentially lower stock prices for healthcare companies.

In this section, I'm fitting a VAR model to find multivariate relationship between the series UNH stock price, GDP, and Employment.

### Step 1: Data Preparing

```{r}
getSymbols("UNH", from="1989-12-29", src="yahoo")
UNH_df <- as.data.frame(UNH)
UNH_df$Date <- rownames(UNH_df)
UNH_df <- UNH_df[c('Date','UNH.Adjusted')]
UNH_df <- UNH_df %>%
  mutate(Date = as.Date(Date)) %>%
  complete(Date = seq.Date(min(Date), max(Date), by="day"))

# fill missing values in stock 
UNH_df <- UNH_df %>% fill(UNH.Adjusted)
#UNH_df
new_dates <- seq(as.Date('1990-01-01'), as.Date('2022-10-01'),'quarter')
#new_dates
UNH_df <- UNH_df[which((UNH_df$Date) %in% new_dates),]

gdp <- read.csv('data/GDP59.CSV')
gdp$DATE <- as.Date(gdp$DATE)
gdp <- gdp[which((gdp$DATE) %in% new_dates),]

emp <- read.csv('data/Employment59.CSV')
emp$DATE <- as.Date(emp$DATE)
emp <- emp[which((emp$DATE) %in% new_dates),]
```

```{r}
dd <- data.frame(UNH_df,gdp,emp)
dd <- dd[,c(1,2,4,6)]
colnames(dd) <- c('DATE', 'stock_price','GDP','Employment')
knitr::kable(head(dd))
```

### Step 2: Plotting the data

```{r}
dd.ts<-ts(dd,star=decimal_date(as.Date("1990-01-01",format = "%Y-%m-%d")),frequency = 4)

autoplot(dd.ts[,c(2:4)], facets=TRUE) +
  xlab("Year") + ylab("") +
  ggtitle("UNH Stock Price, GDP and Employment in USA")
```

### Step 3: Fitting a VAR model

```{r}
VARselect(dd[, c(2:4)], lag.max=10, type="both")
```

It's clear that according to selection criteria p=10 and 9 are good.

I'm fitting several models with p=1(for simplicity), 5, and 9.=\> VAR(1), VAR(5), VAR(9)

```{r}
summary(VAR(dd[, c(2:4)], p=1, type='both'))
```

```{r}
summary(VAR(dd[, c(2:4)], p=5, type='both'))
```

```{r}
summary(VAR(dd[, c(2:4)], p=9, type='both'))
```

### Step 4: Using Cross Validation

```{r, warning=FALSE,message=FALSE}
n=length(dd$stock_price)
k=39

#n-k=92; 92/4=23;

rmse1 <- matrix(NA, 96,3)
rmse2 <- matrix(NA, 96,3)
rmse3 <- matrix(NA,23,4)
year<-c()

# Convert data frame to time series object
ts_obj <- ts(dd[, c(2:4)], star=decimal_date(as.Date("1990-01-01",format = "%Y-%m-%d")),frequency = 4)

st <- tsp(ts_obj )[1]+(k-1)/4 


for(i in 1:23)
{
  
  xtrain <- window(ts_obj, end=st + i-1)
  xtest <- window(ts_obj, start=st + (i-1) + 1/4, end=st + i)
  
  
  fit <- VAR(ts_obj, p=5, type='both')
  fcast <- predict(fit, n.ahead = 4)
  
  fgdp<-fcast$fcst$GDP
  femp<-fcast$fcst$Employment
  fsp<-fcast$fcst$stock_price
  ff<-data.frame(fsp[,1],fgdp[,1],femp[,1])
  
  year<-st + (i-1) + 1/4
  
  ff<-ts(ff,start=c(year,1),frequency = 4)
  
  a = 4*i-3
  b= 4*i
  rmse1[c(a:b),]  <-sqrt((ff-xtest)^2)
  
  fit2 <- VAR(ts_obj, p=9, type='both')
  fcast2 <- predict(fit2, n.ahead = 4)
  
  fgdp<-fcast2$fcst$GDP
  femp<-fcast2$fcst$Employment
  fsp<-fcast2$fcst$stock_price
  ff2<-data.frame(fsp[,1],fgdp[,1],femp[,1])
  
  year<-st + (i-1) + 1/4
  
  ff2<-ts(ff2,start=c(year,1),frequency = 4)
  
  a = 4*i-3
  b= 4*i
  rmse2[c(a:b),]  <-sqrt((ff2-xtest)^2)
}

yr = rep(c(1999:2022),each =4)
qr = rep(paste0("Q",1:4),24)

rmse1 = data.frame(yr,qr,rmse1)
names(rmse1) =c("Year", "Quater","Stock_Price","GDP","Employment")
rmse2 = data.frame(yr,qr,rmse2)
names(rmse2) =c("Year", "Quater","Stock_Price","GDP","Employment")

ggplot() + 
  geom_line(data = rmse1, aes(x = Year, y = Stock_Price),color = "blue") +
  geom_line(data = rmse2, aes(x = Year, y = Stock_Price),color = "red") +
  labs(
    title = "CV RMSE for Stock_Price",
    x = "Date",
    y = "RMSE",
    guides(colour=guide_legend(title="Fit")))
```

```{r}
ggplot() + 
  geom_line(data = rmse1, aes(x = Year, y = GDP),color = "blue") +
  geom_line(data = rmse2, aes(x = Year, y = GDP),color = "red") +
  labs(
    title = "CV RMSE for GDP",
    x = "Date",
    y = "RMSE",
    guides(colour=guide_legend(title="Fit")))
```

```{r}
ggplot() + 
  geom_line(data = rmse1, aes(x = Year, y = Employment),color = "blue") +
  geom_line(data = rmse2, aes(x = Year, y = Employment),color = "red") +
  labs(
    title = "CV RMSE for Employment",
    x = "Date",
    y = "RMSE",
    guides(colour=guide_legend(title="Fit")))
```

fit 1 is better

### Step 5: Forecast

```{r}
forecasts <- predict(VAR(dd[, c(2:4)], p=5, type='both'))

# visualize the iterated forecasts
plot(forecasts)
```
